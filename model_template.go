package main

import (
	"text/template"
)

var header string = `// Code generated by model_gen
// {{.TableName}}.go contains model for the database table [{{.DbName}}.{{.TableName}}]

package {{.PkgName}}

import (
	"database/sql"
	"encoding/json"
	"github.com/zhengyun1112/glorm/orm"
	{{if .ImportTime}}"time"{{end}}
)
`

var modelStruct string = `type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} {{.Tag}}{{if .Comment}} // {{.Comment}}{{end}}
	{{end}}
}

func (obj {{.Name}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
	{{range .Fields}}"{{.ColumnName}}": obj.{{.Name}}{{.Formatter}},
	{{end}}
	})
}
`

var objApi string = `
// Start of the {{.Name}} APIs.

type _{{.Name}}Dao struct {
	m *orm.ORM
}

func (dao _{{.Name}}Dao) Insert({{.LowerName}} *{{.Name}}) error {
	return dao.m.Insert({{.LowerName}})
}

func (dao _{{.Name}}Dao) GetByPK(id {{.PrimaryField.Type}}) (*{{.Name}}, error) {
	var {{.LowerName}} {{.Name}}
	err := dao.m.SelectByPK(&{{.LowerName}}, id)
	if err == sql.ErrNoRows {
		return nil, nil
	} else if err == nil {
		return &{{.LowerName}}, nil
	} else {
		return nil, err
	}
}

var {{.Name}}Dao _{{.Name}}Dao

func init() {
	{{.Name}}Dao.m = orm.Default // You can replace the ORM with your customized one instead of Default
	{{.Name}}Dao.m.AddTable({{.Name}}{})
}
`
var testHeader string = `// Code generated by model_gen
// {{.TableName}}_test.go contains model test for the database table [{{.DbName}}.{{.TableName}}]

package {{.PkgName}}

import (
	"github.com/zhengyun1112/glorm/orm"
	"testing"
	{{if .ImportTime}}"time"{{end}}
)
`

var testCode string = `
func TestInsertAndGet{{.Name}}(t *testing.T) {
	orm.InitDefault("{{.DbString}}")
	orm.TruncateTable("{{.TableName}}")

	var {{.LowerName}} = &{{.Name}}{
	{{range .Fields}} {{if and (not .IsPrimaryKey) (.DefaultValueCode) (not .IgnoreOnInsert)}} {{.Name}}: {{.DefaultValueCode}},
	{{end}}{{end}}
	}
	err := {{.Name}}Dao.Insert({{.LowerName}})
	if err != nil {
		t.Fatalf("failed to Insert{{.Name}}, err: %+v", err)
	}
	loaded, err := {{.Name}}Dao.GetByPK({{.LowerName}}.{{.PrimaryField.Name}})
	if err != nil {
		t.Fatalf("failed to GetByPK, err: %+v", err)
	}
	if loaded == nil {
		t.Fatalf("should have loaded one {{.Name}}")
	}
}
`

var (
	tmHeader        *template.Template
	tmStruct        *template.Template
	tmObjApi        *template.Template
	tmTestHeader    *template.Template
	tmTestCode      *template.Template
)

func init() {
	tmHeader = template.Must(template.New("header").Parse(header))
	tmStruct = template.Must(template.New("modelStruct").Parse(modelStruct))
	tmObjApi = template.Must(template.New("objApi").Parse(objApi))
	tmTestHeader = template.Must(template.New("testHeader").Parse(testHeader))
	tmTestCode = template.Must(template.New("testCode").Parse(testCode))
}