// Code generated by model_gen
// user.go contains model for the database table [blog.user]

package examples

import (
	"database/sql"
	"encoding/json"
	"github.com/zhengyun1112/glorm/orm"
	"time"
)

type User struct {
	UserId    int64 `pk:"true" ai:"true"`
	Name      string
	Password  string
	IsMarried int
	Age       int
	CreatedAt time.Time `ignore:"true"`
	UpdatedAt time.Time `ignore:"true"`
}

func (obj User) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
		"user_id":    obj.UserId,
		"name":       obj.Name,
		"password":   obj.Password,
		"is_married": obj.IsMarried,
		"age":        obj.Age,
		"created_at": obj.CreatedAt.Format("2006-01-02 15:04:05"),
		"updated_at": obj.UpdatedAt.Format("2006-01-02 15:04:05"),
	})
}

// Start of the User APIs.

type _UserDao struct {
	m *orm.ORM
}

func (dao _UserDao) Insert(user *User) error {
	return dao.m.Insert(user)
}

func (dao _UserDao) GetByPK(id int64) (*User, error) {
	var user User
	err := dao.m.SelectByPK(&user, id)
	if err == sql.ErrNoRows {
		return nil, nil
	} else if err == nil {
		return &user, nil
	} else {
		return nil, err
	}
}

var UserDao _UserDao

func init() {
	UserDao.m = orm.Default // You can replace the ORM with your customized one instead of Default
	UserDao.m.AddTable(User{})
}
