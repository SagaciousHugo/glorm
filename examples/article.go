// Code generated by model_gen
// article.go contains model for the database table [blog.article]

package examples

import (
	"database/sql"
	"encoding/json"
	"github.com/zhengyun1112/glorm/orm"
	"time"
)

type Article struct {
	ArticleId int64 `pk:"true" ai:"true"`
	UserId    int64
	Title     string
	State     int // 0: published, 1: draft, 2: hidden
	Content   string
	Donation  float64
	CreatedAt time.Time  `ignore:"true"`
	UpdatedAt time.Time  `ignore:"true"`
	User      *User      `or:"belongs_to" table:"user"`
	Comments  []*Comment `or:"has_many" table:"comment"`
}

func (obj Article) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
		"article_id": obj.ArticleId,
		"user_id":    obj.UserId,
		"title":      obj.Title,
		"state":      obj.State,
		"content":    obj.Content,
		"donation":   obj.Donation,
		"created_at": obj.CreatedAt.Format("2006-01-02 15:04:05"),
		"updated_at": obj.UpdatedAt.Format("2006-01-02 15:04:05"),
	})
}

// Start of the Article APIs.

type _ArticleDao struct {
	m *orm.ORM
}

func (dao _ArticleDao) Insert(article *Article) error {
	return dao.m.Insert(article)
}

func (dao _ArticleDao) GetByPK(id int64) (*Article, error) {
	var article Article
	err := dao.m.SelectByPK(&article, id)
	if err == sql.ErrNoRows {
		return nil, nil
	} else if err == nil {
		return &article, nil
	} else {
		return nil, err
	}
}

var ArticleDao _ArticleDao

func init() {
	ArticleDao.m = orm.Default // You can replace the ORM with your customized one instead of Default
	ArticleDao.m.AddTable(Article{})
}
