// Code generated by model_gen
// comment.go contains model for the database table [blog.comment]

package examples

import (
	"database/sql"
	"encoding/json"
	"github.com/zhengyun1112/glorm/orm"
	"time"
)

type Comment struct {
	CommentId int64 `pk:"true"`
	UserId    int64
	ArticleId int64
	Content   string
	CreatedAt time.Time `ignore:"true"`
	UpdatedAt time.Time `ignore:"true"`
}

func (obj Comment) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
		"comment_id": obj.CommentId,
		"user_id":    obj.UserId,
		"article_id": obj.ArticleId,
		"content":    obj.Content,
		"created_at": obj.CreatedAt.Format("2006-01-02 15:04:05"),
		"updated_at": obj.UpdatedAt.Format("2006-01-02 15:04:05"),
	})
}

// Start of the Comment APIs.

type _CommentDao struct {
	m *orm.ORM
}

func (dao _CommentDao) Insert(comment *Comment) error {
	return dao.m.Insert(comment)
}

func (dao _CommentDao) GetByPK(id int64) (*Comment, error) {
	var comment Comment
	err := dao.m.SelectByPK(&comment, id)
	if err == sql.ErrNoRows {
		return nil, nil
	} else if err == nil {
		return &comment, nil
	} else {
		return nil, err
	}
}

var CommentDao _CommentDao

func init() {
	CommentDao.m = orm.Default // You can replace the ORM with your customized one instead of Default
	CommentDao.m.AddTable(Comment{})
}
